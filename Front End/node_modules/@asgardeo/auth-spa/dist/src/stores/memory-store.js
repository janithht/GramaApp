var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class MemoryStore {
    constructor() {
        this._data = new Map();
    }
    setData(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            this._data.set(key, value);
        });
    }
    getData(key) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            return (_b = (_a = this._data) === null || _a === void 0 ? void 0 : _a.get(key)) !== null && _b !== void 0 ? _b : "{}";
        });
    }
    removeData(key) {
        return __awaiter(this, void 0, void 0, function* () {
            this._data.delete(key);
        });
    }
}
//# sourceMappingURL=memory-store.js.map